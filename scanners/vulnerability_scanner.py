import re
from utils.file_operations import read_file, write_to_file

def filter_output(input_file):
    content = read_file(input_file)
    
    # Filter out non-vulnerability related content
    filtered_content = re.sub(r'(?i)no vulnerabilities found|the code appears to be secure', '', content)
    
    # Remove empty lines
    filtered_content = '\n'.join([line for line in filtered_content.split('\n') if line.strip()])
    
    output_file = input_file.replace('.txt', '_filtered.txt')
    write_to_file(output_file, filtered_content)
    print(f"Filtered output written to {output_file}")
    return output_file

def interpret_results(js_file, url_file, output_file):
    js_content = read_file(js_file)
    url_mapping = read_file(url_file)
    
    vulnerabilities = []
    current_vulnerability = None
    
    for line in js_content.split('\n'):
        if line.startswith('Vulnerability:'):
            if current_vulnerability:
                vulnerabilities.append(current_vulnerability)
            current_vulnerability = {'type': line.split(':', 1)[1].strip(), 'details': []}
        elif current_vulnerability:
            current_vulnerability['details'].append(line.strip())
    
    if current_vulnerability:
        vulnerabilities.append(current_vulnerability)
    
    result = []
    for vuln in vulnerabilities:
        result.append(f"Vulnerability Type: {vuln['type']}")
        result.append("Details:")
        result.extend(vuln['details'])
        
        # Find corresponding URL(s)
        content_hash = hash(vuln['details'][0])  # Use the first line of details as a rough identifier
        urls = re.findall(rf"Content Hash: {content_hash}\nURLs:\n((?:- .+\n)+)", url_mapping)
        if urls:
            result.append("Affected URLs:")
            result.extend(urls[0].split('\n'))
        
        result.append("\n")
    
    write_to_file(output_file, '\n'.join(result))
    print(f"Interpreted results written to {output_file}")

if __name__ == "__main__":
    # This allows the script to be run standalone for testing
    import argparse
    from config import CHATGPT_FILE_NAME, JS_UNIQUE_FILE_NAME, JS_URL_FILE_NAME, CLEAN_UP_FILE_NAME
    
    parser = argparse.ArgumentParser(description="Scan for vulnerabilities in JavaScript code.")
    parser.add_argument("--filter", action="store_true", help="Filter the LLM output")
    parser.add_argument("--interpret", action="store_true", help="Interpret the results")
    args = parser.parse_args()
    
    if args.filter:
        filter_output(CHATGPT_FILE_NAME)
    
    if args.interpret:
        interpret_results(JS_UNIQUE_FILE_NAME, JS_URL_FILE_NAME, CLEAN_UP_FILE_NAME)